{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.c39d6dcf.map","sourceRoot":"..","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // Zmienne które zajmują się przechowywaniem wartości czasu.\r\n    let time:number = 0;\r\n    let seconds:number | string = 0;\r\n    let minutes:number | string = 0;\r\n    let hours:number | string = 0;\r\n\r\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM. \r\n    const secondEl = document.querySelector('.second');\r\n    const minuteEl = document.querySelector('.minute');\r\n    const hourEl = document.querySelector('.hour');\r\n\r\n    // Zegar który tyka co 1000ms. \r\n    const clock = setInterval(() => { \r\n        // Zwiększanie się ilości czasu.\r\n        time = time + 1;\r\n        // Wyliczanie sekund poprzez dzielenie modulo.\r\n        seconds = time % 60;\r\n        // Wyliczanie minut poprzez dzielenie modulo.\r\n        minutes = Math.floor(time / 60) % 60;\r\n        // Wyliczanie godzin poprzez dzielenie modulo.\r\n        hours = Math.floor(time / 3600);\r\n\r\n        // If - wykona się wtedy gdy ilość sekund będzie mniejsza niż 10.\r\n        if (seconds < 10) {\r\n            seconds = `0${seconds}`;\r\n        };\r\n        // If - wykona się wtedy gdy ilość minut będzie mniejsza niż 10.\r\n        if (minutes < 10) {\r\n            minutes = `0${minutes}`;\r\n        }; \r\n        // If - wykona się wtedy gdy ilość godzin będzie mniejsza niż 10.\r\n        if (hours < 10) {\r\n            hours = `0${hours}`;\r\n        }; \r\n        // Aktualizacja czasu w htmlu.\r\n        secondEl.innerText = seconds;\r\n        minuteEl.innerText = minutes;\r\n        hourEl.innerText = hours;\r\n    },1000);\r\n\r\n    interface materialsObject {\r\n        wood: number;\r\n        stone: number;\r\n        gold: number;\r\n    }\r\n\r\n    //Ilość surowców.\r\n    const materials: materialsObject= {\r\n        wood: 0,\r\n        stone: 0,\r\n        gold: 0,\r\n    };\r\n\r\n    //Przychód poszczególnych surowców.\r\n    const incomeMaterials:materialsObject  = {\r\n        wood: 1,\r\n        stone: 1,\r\n        gold: 1,\r\n    };\r\n\r\n    interface storageCapacity {\r\n        wood: number;\r\n        stone: number;\r\n    }\r\n\r\n    // Pojemnośc magazynów.\r\n    const storageCapacity:storageCapacity  = {\r\n        wood: 20,\r\n        stone: 20,\r\n    };\r\n\r\n    // Zmienne, które przechowuje ilość robotników.\r\n    let worker:number = 5;\r\n    // Zmienne, które przechowują maksymalną ilość robotników.\r\n    const maxWorker:number = 10;\r\n\r\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM.\r\n    const woodEl = document.querySelector('.wood');\r\n    const stoneEl = document.querySelector('.stone');\r\n    const goldEl = document.querySelector('.gold');\r\n    const workerEl = document.querySelector('.worker');\r\n    const maxWoodEl = document.querySelector('.max-wood');\r\n    const maxStoneEl = document.querySelector('.max-stone');\r\n\r\n    // Zwiększanie się ilości drewna i kamienia co 1000ms.\r\n    const intervalWoodStoneIncome = setInterval(() => {\r\n        // Zatrzymanie przychodu drewna i kamienia na koniec gry.\r\n        if (endOfTheGame) {\r\n            clearInterval(intervalWoodStoneIncome);\r\n        };\r\n        // Zwiększenie ilości drewna gdy jest możliwe jego wyprodukowanie.  \r\n        if (materials.wood < storageCapacity.wood) {\r\n            materials.wood = materials.wood + incomeMaterials.wood;\r\n            // Ilość drewna równa jego maksymalnej ilości.\r\n            if (materials.wood >= storageCapacity.wood) { \r\n                materials.wood = storageCapacity.wood;\r\n            };\r\n            woodEl.innerText = materials.wood; \r\n        }    \r\n        // Zwiększenie ilości kamienia gdy jest możliwe jego wyprodukowanie.\r\n        if (materials.stone < storageCapacity.stone) {\r\n            materials.stone = materials.stone + incomeMaterials.stone;\r\n            // Ilość kamienia równa jego maksymalnej ilości.\r\n            if (materials.stone >= storageCapacity.stone) { \r\n                materials.stone = storageCapacity.stone;\r\n            }; \r\n            stoneEl.innerText  = materials.stone;\r\n        };\r\n    },1000);\r\n\r\n    // Zwiększanie ilość złota co 3000ms.\r\n    const intervalGoldIncome = setInterval(() => { \r\n        // Zatrzymanie przychodu złota.\r\n        if (endOfTheGame) {            \r\n            clearInterval(intervalGoldIncome);\r\n        };\r\n        // Zwiększenie się ilości złota.\r\n        materials.gold = materials.gold + incomeMaterials.gold;\r\n        goldEl.innerText = materials.gold; \r\n    },3000);\r\n\r\n    // Dodawanie określonych bonusów po wybudowaniu budynków.\r\n    const addBonus:Function = (value:string) => {\r\n        // Zwiększenie przychodu drewna.\r\n        if (value === 'woodIncome') {   \r\n            incomeMaterials.wood += 2;\r\n        // Zwiększenie przychodu kamienia.   \r\n        } else if (value === 'stoneIncome') {   \r\n            incomeMaterials.stone += 2;\r\n        // Zwiększenie przychodu złota.    \r\n        } else if (value === 'goldIncome') {   \r\n            incomeMaterials.gold +=2;\r\n        // Nowy robotnik.    \r\n        } else if (value === 'newWorker') {\r\n            if (worker < maxWorker) {\r\n                worker += 1;\r\n                workerEl.innerText = worker;\r\n            };\r\n        // Powiększenie magazynu drewna.    \r\n        } else if (value === 'enlargingTheWarehouseWood') {\r\n            storageCapacity.wood += 10;\r\n            maxWoodEl.innerText = storageCapacity.wood;\r\n        // Powiększenie magazynu kamienia.    \r\n        } else if (value === 'enlargingTheWarehouseStone') {\r\n            storageCapacity.stone += 10;\r\n            maxStoneEl.innerText = storageCapacity.stone;\r\n        // Zwycięstwo.    \r\n        } else if (value === 'victory') {\r\n            victory();\r\n        };    \r\n    }; \r\n\r\n    // Zmienna, która określa czy licznik budowy jest włączony; domyślnie - false.\r\n    let setConstructionTimer:boolean = false;\r\n    // Zmienna, która określa czy skończyła się gra; domyślnie - false.\r\n    let endOfTheGame:boolean = false;\r\n\r\n    // Pobieranie elementu reprezentującego wynik z drzewa DOM. \r\n    const boardEl= document.querySelector('.board');\r\n\r\n    // Fukcja, która wyświetla nowy budynek w htmlu.\r\n    const construction = (type) => {\r\n        // Tworzenie nowego diva, który stanie się budynkiem.\r\n        const newBuilding:HTMLDivElement = document.createElement('div');\r\n        // Przypisanie mu odpowiednich klas.\r\n        newBuilding.classList.add(type);\r\n        newBuilding.classList.add('new-building');\r\n        // Dodanie budynku do htmla. \r\n        boardEl.appendChild(newBuilding);\r\n    };\r\n\r\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM. \r\n    const timerEl = document.querySelector('.timer');\r\n    const buildingBoxEl = document.querySelector('.building-box');\r\n\r\n    // Wybuduj budynek.\r\n    const constructionBuilding:Function = (object) => {\r\n        // Nastąpi rozpoczęcie budowy.\r\n        if ( materials.wood >= object.wood && materials.stone >= object.stone && materials.gold >= object.gold && setConstructionTimer === false && endOfTheGame === false) {\r\n            // Włączenie licznika budowy.\r\n            setConstructionTimer = true;\r\n            // Pobranie surowców.\r\n            materials.wood -= object.wood;\r\n            materials.stone -= object.stone;\r\n            materials.gold -= object.gold;\r\n            // Pojawienie się budynku w htmlu.\r\n            construction(object.name);\r\n            // Funkcja powoduje pojawienie się licznika budowy w htmlu; aktywuje bonus związany ze zbudowanym budynkiem.\r\n            constructionOfTheBuilding( timerInProgress(object.time), object.bonus );\r\n        };\r\n    };\r\n\r\n    // Funkcja, która zwraca czas budowy poszczególnych budynków.\r\n    const timerInProgress = (time) => {\r\n        // Zmienna która przechowuje czas budowy.\r\n        const constructionTime = Math.floor(time / worker);\r\n        // Pojawienie się komunikatu o czasie budowy w htmlu.\r\n        timerEl.innerText = `Czas budowy: ${constructionTime}`;  \r\n        buildingBoxEl.classList.add('opacity-05');\r\n        // Zwrócenie zmiennej.\r\n        return constructionTime;\r\n    };\r\n\r\n    // Funkcja, która wyświetla czas budowy budynku w htmlu.\r\n    const constructionOfTheBuilding:Function = (constructionTime:number,  value:string) => {\r\n        const contructionInProgress = setInterval(() => {\r\n            // Zmniejszanie się czasu budowy co 1000ms.\r\n            constructionTime--;\r\n            // Aktualizacja czasu budowy w htmlu.\r\n            timerEl.innerText = `Czas budowy: ${constructionTime}`;\r\n            // Wyłączenie licznika i aktywacja bonusów za wybudowany budynek.\r\n            if (constructionTime < 1) {\r\n                // Zmiana wartości zmiennej na 0, gdyż skończył się czas budowy.\r\n                constructionTime = 0;\r\n                setConstructionTimer = false;\r\n                // Wyczyszczenie htmla.\r\n                timerEl.innerText = '';\r\n                buildingBoxEl.classList.remove('opacity-05');\r\n                buildingBoxEl.classList.add('opacity-1');\r\n                // Wyłączenie licznika.\r\n                clearInterval(contructionInProgress);\r\n                // Wywołanie bonusu jaki się dostaje za wybudowanie budynu. \r\n                addBonus(value);\r\n            };\r\n        },1000);\r\n    };\r\n\r\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM. \r\n    const winBoxEl = document.querySelector('.win-box');\r\n    const infoBoxEl  = document.querySelector('.info-box');\r\n\r\n    // Funkcja, która informuje gracza o wygraniu gry.\r\n    const victory:Function = () => {\r\n        // Zmiana wartości zmiennej, która przechowuje informacje o tym czy gra została wygrana.\r\n        endOfTheGame = true;\r\n        // Zatrzymanie czasu.\r\n        clearInterval(clock);\r\n        // Wyświetlenie się boxa z napisem 'wygrałeś'.\r\n        winBoxEl.classList.add('opacity-1');\r\n        // Dodanie przeźroczystości na poszczególne sekcja planszy.\r\n        infoBoxEl.classList.add('opacity-05');\r\n  \r\n        // Pobieranie elementu reprezentującego wynik z drzewa DOM. \r\n        const newBuildingEls = document.querySelectorAll('.new-building');     /// <---- co tutaj? Array nie pasuje\r\n        // Dodanie do każdego elementu stylu poprzez pętle. \r\n        newBuildingEls.forEach((el) => {\r\n            el.classList.add('opacity-05');\r\n        });\r\n    }\r\n \r\n\r\n    interface building {                               \r\n        name: string;\r\n        wood: number;\r\n        stone: number;\r\n        gold: number;\r\n        time: number;\r\n        bonus: string;\r\n    }\r\n\r\n    // Zbiór informacji na temat budynków.                    \r\n    const buildings = [{                                 // Czy tutaj powinnam przerobić strukture by podpiąć pod każdy budynek jeden interface? \r\n        name: 'sawmill',                                 // Czy jest jakieś inne rozwiązanie?  \r\n        wood: 20,                                        // Czy pisanie js'a w ts'cie różni się jakoś? Prócz nadawania typów itp. Zastanawiam się czy inaczej powinnam podchodzić do kodu\r\n        stone: 0,                                           \r\n        gold: 3,\r\n        time: 120,\r\n        bonus: 'woodIncome',\r\n    },{\r\n        name: 'quarry', \r\n        wood: 5,\r\n        stone: 5,\r\n        gold: 3,\r\n        time: 120,\r\n        bonus: 'stoneIncome',\r\n    },{\r\n        name: 'gold-mine', \r\n        wood: 0,\r\n        stone: 20,\r\n        gold: 5,\r\n        time: 200,\r\n        bonus: 'goldIncome',\r\n    },{\r\n        name: 'farm', \r\n        wood: 6,\r\n        stone: 0,\r\n        gold: 0,\r\n        time: 80,\r\n        bonus: 'newWorker',\r\n    },{\r\n        name: 'castle', \r\n        wood: 30,\r\n        stone: 100,\r\n        gold: 50,\r\n        time: 300,\r\n        bonus: 'victory',\r\n    },{\r\n        name: 'wood-warehouse', \r\n        wood: 20,\r\n        stone: 0,\r\n        gold: 0,\r\n        time: 100,\r\n        bonus: 'enlargingTheWarehouseWood',\r\n    },{\r\n        name: 'stone-warehouse', \r\n        wood: 0,\r\n        stone: 20,\r\n        gold: 0,\r\n        time: 100,\r\n        bonus: 'enlargingTheWarehouseStone',\r\n    }];\r\n\r\n    // Pobieranie elementów reprezentujących wyniki z drzewa DOM.\r\n    const buttonSawmillEl = document.querySelector('.button-sawmill');\r\n    const buttonQuarryEl = document.querySelector('.button-quarry');\r\n    const buttonGoldMineEl = document.querySelector('.button-gold-mine');\r\n    const buttonFarmEl = document.querySelector('.button-farm');\r\n    const buttonWoodWarehouseEl = document.querySelector('.button-wood-warehouse');\r\n    const buttonStoneWarehouseEl = document.querySelector('.button-stone-warehouse');\r\n    const buttonCastleEl = document.querySelector('.button-castle');\r\n\r\n    // Wybuduj TARTAK.  \r\n    buttonSawmillEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[0]);\r\n    });\r\n\r\n    // Wybuduj KAMIENIOŁOM. \r\n    buttonQuarryEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[1]);\r\n    });\r\n\r\n    // Wybuduj KOPALNIE ZŁOTA. \r\n    buttonGoldMineEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[2]);\r\n    });\r\n\r\n    // Wybuduj FARME. \r\n    buttonFarmEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[3]);\r\n    });\r\n    \r\n    // Wybuduj ZAMEK. \r\n    buttonCastleEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[4]);\r\n    }); \r\n\r\n    // Wybuduj MAGAZYN DREWNA. \r\n    buttonWoodWarehouseEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[5]);\r\n    });\r\n\r\n    // Wybuduj MAGAZYN KAMIENIA. \r\n    buttonStoneWarehouseEl.addEventListener('click', () => {\r\n        constructionBuilding(buildings[6]);\r\n    });\r\n\r\n});\r\n\r\n\r\n\r\n// :Element ?\r\n"]}